#ifndef I2C_H
#define I2C_H
#include <avr/io.h>
#include <avr/interrupt.h>

//*******************************************************************
//		Настройка модуля ТВИ										*
//------------------------------------------------------------------*
#define bitrate_def	1		// скорость передачи по-умолчанию kHz	*
//------------------------------------------------------------------*
// включение подтяжки с помощью встроенных резисторов				* 
// #define set_pull_up_i2c	//Раскомментируйте строку для включения	*
#define PORT_i2c	PORTC	// порт									*
#define SCL			0		// линия тактирования					*
#define SDA			1		// линия данных							*
//------------------------------------------------------------------*
//	Настройка  модуля ТВИ в Master-РЕЖИМЕ							*
#define	Master_MODE	        // Для отключения закоментируйте строку * 
#define Size_Master_Buf	20	// Кол-во байт Master-буфера			*
//------------------------------------------------------------------*
//	Настройка  модуля ТВИ в Slave-РЕЖИМЕ							*
//#define	Slave_MODE	        // Для отключения закоментируйте строку * 
#define i2cMyAddres		0b1111000	// адрес модуля	0xF0 или 0xF1	*
#define BroadCast		1 // 1 - включен, 0 - выключен				* 
#define Size_Slave_Buf	20	// Кол-во байт Master-буфера			*
//*******************************************************************

//***********************************************************************
//		Описание общих прототипов функций								*
//______________________________________________________________________*
//	Инициализация шины TWI												*	
void i2cInit(void);													//	*
//----------------------------------------------------------------------*
//	Изменение частоты шины TWI											*
void i2cSetBitrate (uint16_t bitrateKHz);							//	*
//***********************************************************************


//***********************************************************************
//																		*
//		Описание прототипов функций в Master-РЕЖИМЕ						*
//																		*
#ifdef Master_MODE													//	*
//______________________________________________________________________*
//	Сброс указателя Master-буфера										*
void i2cMasterBufReset(void);										//	*
//----------------------------------------------------------------------*
//----------------------------------------------------------------------*
//	Загрузка ДАННЫХ в Master-буфер для ОТПРАВКИ							*
//	Результат функции успешность загрузки данных в буфер				*
uint8_t i2cMasterUploadBuf(uint8_t data);							//	*
//----------------------------------------------------------------------*
//	Отправка данных из Master-буфера									*
//	Результат функции кол-во отправленных байт							*
uint8_t i2cMasterSendBuf(uint8_t deviceAdd);						//	*
//----------------------------------------------------------------------*
//----------------------------------------------------------------------*
//	Чтение данных из Slave												*
//	Перед чтение происходит запись данных из Мастер-Буфера				*
//	Результат функции кол-во принятых байт								*
uint8_t i2cMasterReceive(uint8_t deviceAdd, uint8_t lenght);		//	*
//----------------------------------------------------------------------*
//	ПОСЛЕДОВАТЕЛЬНОЕ чтение ДАННЫХ из Master-буфер после ПРИЕМА			*
//	Результат функции успешность чтения данных из буфера				*
//uint8_t i2cMasterDownloadBuf(uint8_t* result);						//	*
//----------------------------------------------------------------------*
//	ИНДЕКНОЕ чтение ДАННЫХ из Master-буфера после ПРИЕМА				*
//	Результат функции успешность чтения данных из буфера				*
uint8_t i2cMasterDownloadBufIndex(uint8_t* result, uint8_t index);	//	*
#endif
//***********************************************************************

//***********************************************************************
//																		*
//		Описание прототипов функций в Slave-РЕЖИМЕ						*
//																		*
//______________________________________________________________________*
#ifdef Slave_MODE													//	*
//----------------------------------------------------------------------*
//	Настройка АДРЕСА шины ТВИ											*
void i2cSetDeviceAddr(uint8_t deviceAddr, uint8_t Broadcast);		//	*
//----------------------------------------------------------------------*
// Загрузка значений в Slave буфер										*
// Результат функции успешность загрузки								*
uint8_t i2cSlaveUploadBuf(uint8_t data, uint8_t index);				//	*
//----------------------------------------------------------------------*
//	ИНДЕКНОЕ чтение ДАННЫХ из Slave-буфера после ПРИЕМА					*
//	Результат функции успешность чтения данных из буфера				*
uint8_t i2cSlaveDownloadBuf(uint8_t* result, uint8_t index);		//	*
#endif																//	*
//***********************************************************************
#endif







